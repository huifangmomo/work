//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `bignumber.min.js`.
    static let bignumberMinJs = Rswift.FileResource(bundle: R.hostingBundle, name: "bignumber.min", pathExtension: "js")
    /// Resource file `dappUse.bundle`.
    static let dappUseBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "dappUse", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "bignumber.min", withExtension: "js")`
    static func bignumberMinJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bignumberMinJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "dappUse", withExtension: "bundle")`
    static func dappUseBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dappUseBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 97 images.
  struct image {
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `alarm`.
    static let alarm = Rswift.ImageResource(bundle: R.hostingBundle, name: "alarm")
    /// Image `bg_confirm`.
    static let bg_confirm = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_confirm")
    /// Image `bg_fail`.
    static let bg_fail = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_fail")
    /// Image `bg_fall`.
    static let bg_fall = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_fall")
    /// Image `bg_into`.
    static let bg_into = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_into")
    /// Image `bg_operation`.
    static let bg_operation = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_operation")
    /// Image `bg_receivables`.
    static let bg_receivables = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_receivables")
    /// Image `bg_rise`.
    static let bg_rise = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_rise")
    /// Image `bg_turnout`.
    static let bg_turnout = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_turnout")
    /// Image `bg_update`.
    static let bg_update = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_update")
    /// Image `bg_wallet`.
    static let bg_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_wallet")
    /// Image `bg_yuanjiao`.
    static let bg_yuanjiao = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_yuanjiao")
    /// Image `btn_add_1`.
    static let btn_add_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add_1")
    /// Image `btn_add_2`.
    static let btn_add_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add_2")
    /// Image `btn_add`.
    static let btn_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add")
    /// Image `btn_cancel_1`.
    static let btn_cancel_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_cancel_1")
    /// Image `btn_cancel_2`.
    static let btn_cancel_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_cancel_2")
    /// Image `btn_change_1`.
    static let btn_change_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_change_1")
    /// Image `btn_change_2`.
    static let btn_change_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_change_2")
    /// Image `btn_close_1`.
    static let btn_close_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_close_1")
    /// Image `btn_close_2`.
    static let btn_close_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_close_2")
    /// Image `btn_confirm2_1`.
    static let btn_confirm2_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_confirm2_1")
    /// Image `btn_confirm2_2`.
    static let btn_confirm2_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_confirm2_2")
    /// Image `btn_confirm_1`.
    static let btn_confirm_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_confirm_1")
    /// Image `btn_confirm_2`.
    static let btn_confirm_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_confirm_2")
    /// Image `btn_copy_1`.
    static let btn_copy_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_copy_1")
    /// Image `btn_copy_2`.
    static let btn_copy_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_copy_2")
    /// Image `btn_dapp_1`.
    static let btn_dapp_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_dapp_1")
    /// Image `btn_dapp_2`.
    static let btn_dapp_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_dapp_2")
    /// Image `btn_details_1`.
    static let btn_details_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_details_1")
    /// Image `btn_details_2`.
    static let btn_details_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_details_2")
    /// Image `btn_details_3`.
    static let btn_details_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_details_3")
    /// Image `btn_details_4`.
    static let btn_details_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_details_4")
    /// Image `btn_establish_1`.
    static let btn_establish_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_establish_1")
    /// Image `btn_establish_2`.
    static let btn_establish_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_establish_2")
    /// Image `btn_gback_1`.
    static let btn_gback_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_gback_1")
    /// Image `btn_gback_2`.
    static let btn_gback_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_gback_2")
    /// Image `btn_import_1`.
    static let btn_import_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_import_1")
    /// Image `btn_import_2`.
    static let btn_import_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_import_2")
    /// Image `btn_more_1`.
    static let btn_more_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_more_1")
    /// Image `btn_more_2`.
    static let btn_more_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_more_2")
    /// Image `btn_quotation_1`.
    static let btn_quotation_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_quotation_1")
    /// Image `btn_quotation_2`.
    static let btn_quotation_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_quotation_2")
    /// Image `btn_receivables_1`.
    static let btn_receivables_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_receivables_1")
    /// Image `btn_receivables_2`.
    static let btn_receivables_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_receivables_2")
    /// Image `btn_scanning_1`.
    static let btn_scanning_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_scanning_1")
    /// Image `btn_scanning_2`.
    static let btn_scanning_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_scanning_2")
    /// Image `btn_send_1`.
    static let btn_send_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_send_1")
    /// Image `btn_send_2`.
    static let btn_send_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_send_2")
    /// Image `btn_set_1`.
    static let btn_set_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_set_1")
    /// Image `btn_set_2`.
    static let btn_set_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_set_2")
    /// Image `btn_tick_1`.
    static let btn_tick_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_tick_1")
    /// Image `btn_tick_2`.
    static let btn_tick_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_tick_2")
    /// Image `btn_transaction_1`.
    static let btn_transaction_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_transaction_1")
    /// Image `btn_transaction_2`.
    static let btn_transaction_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_transaction_2")
    /// Image `btn_triangle_1`.
    static let btn_triangle_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_triangle_1")
    /// Image `btn_triangle_2`.
    static let btn_triangle_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_triangle_2")
    /// Image `btn_triangle_3`.
    static let btn_triangle_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_triangle_3")
    /// Image `btn_triangle_4`.
    static let btn_triangle_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_triangle_4")
    /// Image `btn_wallet_1`.
    static let btn_wallet_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_wallet_1")
    /// Image `btn_wallet_2`.
    static let btn_wallet_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_wallet_2")
    /// Image `btn_wback_1`.
    static let btn_wback_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_wback_1")
    /// Image `btn_wback_2`.
    static let btn_wback_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_wback_2")
    /// Image `btn_zhuanzhang_1`.
    static let btn_zhuanzhang_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_zhuanzhang_1")
    /// Image `btn_zhuanzhang_2`.
    static let btn_zhuanzhang_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_zhuanzhang_2")
    /// Image `icon_ money_1`.
    static let icon_Money_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_ money_1")
    /// Image `icon_about`.
    static let icon_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_about")
    /// Image `icon_add`.
    static let icon_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_add")
    /// Image `icon_addressbook`.
    static let icon_addressbook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_addressbook")
    /// Image `icon_arrow`.
    static let icon_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow")
    /// Image `icon_careful_2`.
    static let icon_careful_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_careful_2")
    /// Image `icon_careful`.
    static let icon_careful = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_careful")
    /// Image `icon_clear`.
    static let icon_clear = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_clear")
    /// Image `icon_currency`.
    static let icon_currency = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_currency")
    /// Image `icon_establish_1`.
    static let icon_establish_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_establish_1")
    /// Image `icon_establish_2`.
    static let icon_establish_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_establish_2")
    /// Image `icon_establish_3`.
    static let icon_establish_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_establish_3")
    /// Image `icon_establish_4`.
    static let icon_establish_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_establish_4")
    /// Image `icon_language`.
    static let icon_language = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_language")
    /// Image `icon_network`.
    static let icon_network = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_network")
    /// Image `icon_notice`.
    static let icon_notice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_notice")
    /// Image `icon_password`.
    static let icon_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_password")
    /// Image `icon_rabbit`.
    static let icon_rabbit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_rabbit")
    /// Image `icon_search`.
    static let icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search")
    /// Image `icon_setup`.
    static let icon_setup = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setup")
    /// Image `icon_shanping`.
    static let icon_shanping = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shanping")
    /// Image `icon_share`.
    static let icon_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share")
    /// Image `icon_tick`.
    static let icon_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tick")
    /// Image `icon_tortoise`.
    static let icon_tortoise = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tortoise")
    /// Image `icon_wallet_1`.
    static let icon_wallet_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_1")
    /// Image `icon_wallet_2`.
    static let icon_wallet_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_2")
    /// Image `icon_wallet_3`.
    static let icon_wallet_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_3")
    /// Image `icon_wallet_4`.
    static let icon_wallet_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_4")
    /// Image `icon_wallet`.
    static let icon_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet")
    /// Image `list_tab`.
    static let list_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "list_tab")
    /// Image `set`.
    static let set = Rswift.ImageResource(bundle: R.hostingBundle, name: "set")
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alarm", bundle: ..., traitCollection: ...)`
    static func alarm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarm, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_confirm", bundle: ..., traitCollection: ...)`
    static func bg_confirm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_confirm, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_fail", bundle: ..., traitCollection: ...)`
    static func bg_fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_fail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_fall", bundle: ..., traitCollection: ...)`
    static func bg_fall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_fall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_into", bundle: ..., traitCollection: ...)`
    static func bg_into(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_into, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_operation", bundle: ..., traitCollection: ...)`
    static func bg_operation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_operation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_receivables", bundle: ..., traitCollection: ...)`
    static func bg_receivables(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_receivables, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_rise", bundle: ..., traitCollection: ...)`
    static func bg_rise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_rise, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_turnout", bundle: ..., traitCollection: ...)`
    static func bg_turnout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_turnout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_update", bundle: ..., traitCollection: ...)`
    static func bg_update(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_update, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_wallet", bundle: ..., traitCollection: ...)`
    static func bg_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_yuanjiao", bundle: ..., traitCollection: ...)`
    static func bg_yuanjiao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_yuanjiao, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add", bundle: ..., traitCollection: ...)`
    static func btn_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add_1", bundle: ..., traitCollection: ...)`
    static func btn_add_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add_2", bundle: ..., traitCollection: ...)`
    static func btn_add_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_cancel_1", bundle: ..., traitCollection: ...)`
    static func btn_cancel_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_cancel_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_cancel_2", bundle: ..., traitCollection: ...)`
    static func btn_cancel_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_cancel_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_change_1", bundle: ..., traitCollection: ...)`
    static func btn_change_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_change_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_change_2", bundle: ..., traitCollection: ...)`
    static func btn_change_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_change_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_close_1", bundle: ..., traitCollection: ...)`
    static func btn_close_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_close_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_close_2", bundle: ..., traitCollection: ...)`
    static func btn_close_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_close_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_confirm2_1", bundle: ..., traitCollection: ...)`
    static func btn_confirm2_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_confirm2_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_confirm2_2", bundle: ..., traitCollection: ...)`
    static func btn_confirm2_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_confirm2_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_confirm_1", bundle: ..., traitCollection: ...)`
    static func btn_confirm_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_confirm_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_confirm_2", bundle: ..., traitCollection: ...)`
    static func btn_confirm_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_confirm_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_copy_1", bundle: ..., traitCollection: ...)`
    static func btn_copy_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_copy_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_copy_2", bundle: ..., traitCollection: ...)`
    static func btn_copy_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_copy_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_dapp_1", bundle: ..., traitCollection: ...)`
    static func btn_dapp_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_dapp_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_dapp_2", bundle: ..., traitCollection: ...)`
    static func btn_dapp_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_dapp_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_details_1", bundle: ..., traitCollection: ...)`
    static func btn_details_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_details_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_details_2", bundle: ..., traitCollection: ...)`
    static func btn_details_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_details_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_details_3", bundle: ..., traitCollection: ...)`
    static func btn_details_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_details_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_details_4", bundle: ..., traitCollection: ...)`
    static func btn_details_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_details_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_establish_1", bundle: ..., traitCollection: ...)`
    static func btn_establish_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_establish_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_establish_2", bundle: ..., traitCollection: ...)`
    static func btn_establish_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_establish_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_gback_1", bundle: ..., traitCollection: ...)`
    static func btn_gback_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_gback_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_gback_2", bundle: ..., traitCollection: ...)`
    static func btn_gback_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_gback_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_import_1", bundle: ..., traitCollection: ...)`
    static func btn_import_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_import_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_import_2", bundle: ..., traitCollection: ...)`
    static func btn_import_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_import_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_more_1", bundle: ..., traitCollection: ...)`
    static func btn_more_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_more_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_more_2", bundle: ..., traitCollection: ...)`
    static func btn_more_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_more_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_quotation_1", bundle: ..., traitCollection: ...)`
    static func btn_quotation_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_quotation_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_quotation_2", bundle: ..., traitCollection: ...)`
    static func btn_quotation_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_quotation_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_receivables_1", bundle: ..., traitCollection: ...)`
    static func btn_receivables_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_receivables_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_receivables_2", bundle: ..., traitCollection: ...)`
    static func btn_receivables_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_receivables_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_scanning_1", bundle: ..., traitCollection: ...)`
    static func btn_scanning_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_scanning_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_scanning_2", bundle: ..., traitCollection: ...)`
    static func btn_scanning_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_scanning_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_send_1", bundle: ..., traitCollection: ...)`
    static func btn_send_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_send_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_send_2", bundle: ..., traitCollection: ...)`
    static func btn_send_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_send_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_set_1", bundle: ..., traitCollection: ...)`
    static func btn_set_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_set_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_set_2", bundle: ..., traitCollection: ...)`
    static func btn_set_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_set_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_tick_1", bundle: ..., traitCollection: ...)`
    static func btn_tick_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_tick_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_tick_2", bundle: ..., traitCollection: ...)`
    static func btn_tick_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_tick_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_transaction_1", bundle: ..., traitCollection: ...)`
    static func btn_transaction_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_transaction_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_transaction_2", bundle: ..., traitCollection: ...)`
    static func btn_transaction_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_transaction_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_triangle_1", bundle: ..., traitCollection: ...)`
    static func btn_triangle_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_triangle_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_triangle_2", bundle: ..., traitCollection: ...)`
    static func btn_triangle_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_triangle_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_triangle_3", bundle: ..., traitCollection: ...)`
    static func btn_triangle_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_triangle_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_triangle_4", bundle: ..., traitCollection: ...)`
    static func btn_triangle_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_triangle_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_wallet_1", bundle: ..., traitCollection: ...)`
    static func btn_wallet_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_wallet_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_wallet_2", bundle: ..., traitCollection: ...)`
    static func btn_wallet_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_wallet_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_wback_1", bundle: ..., traitCollection: ...)`
    static func btn_wback_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_wback_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_wback_2", bundle: ..., traitCollection: ...)`
    static func btn_wback_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_wback_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_zhuanzhang_1", bundle: ..., traitCollection: ...)`
    static func btn_zhuanzhang_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_zhuanzhang_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_zhuanzhang_2", bundle: ..., traitCollection: ...)`
    static func btn_zhuanzhang_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_zhuanzhang_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_ money_1", bundle: ..., traitCollection: ...)`
    static func icon_Money_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Money_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_about", bundle: ..., traitCollection: ...)`
    static func icon_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_about, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_add", bundle: ..., traitCollection: ...)`
    static func icon_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_addressbook", bundle: ..., traitCollection: ...)`
    static func icon_addressbook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_addressbook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_arrow", bundle: ..., traitCollection: ...)`
    static func icon_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_careful", bundle: ..., traitCollection: ...)`
    static func icon_careful(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_careful, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_careful_2", bundle: ..., traitCollection: ...)`
    static func icon_careful_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_careful_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_clear", bundle: ..., traitCollection: ...)`
    static func icon_clear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_clear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_currency", bundle: ..., traitCollection: ...)`
    static func icon_currency(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_currency, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_establish_1", bundle: ..., traitCollection: ...)`
    static func icon_establish_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_establish_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_establish_2", bundle: ..., traitCollection: ...)`
    static func icon_establish_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_establish_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_establish_3", bundle: ..., traitCollection: ...)`
    static func icon_establish_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_establish_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_establish_4", bundle: ..., traitCollection: ...)`
    static func icon_establish_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_establish_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_language", bundle: ..., traitCollection: ...)`
    static func icon_language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_language, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_network", bundle: ..., traitCollection: ...)`
    static func icon_network(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_network, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_notice", bundle: ..., traitCollection: ...)`
    static func icon_notice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_notice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_password", bundle: ..., traitCollection: ...)`
    static func icon_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_rabbit", bundle: ..., traitCollection: ...)`
    static func icon_rabbit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_rabbit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_search", bundle: ..., traitCollection: ...)`
    static func icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setup", bundle: ..., traitCollection: ...)`
    static func icon_setup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_shanping", bundle: ..., traitCollection: ...)`
    static func icon_shanping(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shanping, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share", bundle: ..., traitCollection: ...)`
    static func icon_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tick", bundle: ..., traitCollection: ...)`
    static func icon_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tortoise", bundle: ..., traitCollection: ...)`
    static func icon_tortoise(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tortoise, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet", bundle: ..., traitCollection: ...)`
    static func icon_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_1", bundle: ..., traitCollection: ...)`
    static func icon_wallet_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_2", bundle: ..., traitCollection: ...)`
    static func icon_wallet_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_3", bundle: ..., traitCollection: ...)`
    static func icon_wallet_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_wallet_4", bundle: ..., traitCollection: ...)`
    static func icon_wallet_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "list_tab", bundle: ..., traitCollection: ...)`
    static func list_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "set", bundle: ..., traitCollection: ...)`
    static func set(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.set, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    /// Nib `AddressBookCell`.
    static let addressBookCell = _R.nib._AddressBookCell()
    /// Nib `EditTokenTableViewCell`.
    static let editTokenTableViewCell = _R.nib._EditTokenTableViewCell()
    /// Nib `TitleBarCell`.
    static let titleBarCell = _R.nib._TitleBarCell()
    /// Nib `btnTabCell`.
    static let btnTabCell = _R.nib._btnTabCell()
    /// Nib `hqCell`.
    static let hqCell = _R.nib._hqCell()
    /// Nib `tokenCell_2`.
    static let tokenCell_2 = _R.nib._tokenCell_2()
    /// Nib `tokenCell`.
    static let tokenCell = _R.nib._tokenCell()
    /// Nib `transactionCell`.
    static let transactionCell = _R.nib._transactionCell()
    /// Nib `walletCell`.
    static let walletCell = _R.nib._walletCell()
    /// Nib `walletManageCell`.
    static let walletManageCell = _R.nib._walletManageCell()
    /// Nib `zxCell`.
    static let zxCell = _R.nib._zxCell()
    
    /// `UINib(name: "AddressBookCell", in: bundle)`
    static func addressBookCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressBookCell)
    }
    
    /// `UINib(name: "EditTokenTableViewCell", in: bundle)`
    static func editTokenTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editTokenTableViewCell)
    }
    
    /// `UINib(name: "TitleBarCell", in: bundle)`
    static func titleBarCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleBarCell)
    }
    
    /// `UINib(name: "btnTabCell", in: bundle)`
    static func btnTabCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.btnTabCell)
    }
    
    /// `UINib(name: "hqCell", in: bundle)`
    static func hqCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hqCell)
    }
    
    /// `UINib(name: "tokenCell", in: bundle)`
    static func tokenCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tokenCell)
    }
    
    /// `UINib(name: "tokenCell_2", in: bundle)`
    static func tokenCell_2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tokenCell_2)
    }
    
    /// `UINib(name: "transactionCell", in: bundle)`
    static func transactionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionCell)
    }
    
    /// `UINib(name: "walletCell", in: bundle)`
    static func walletCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletCell)
    }
    
    /// `UINib(name: "walletManageCell", in: bundle)`
    static func walletManageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletManageCell)
    }
    
    /// `UINib(name: "zxCell", in: bundle)`
    static func zxCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.zxCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 14 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddressBookCell`.
    static let addressBookCell: Rswift.ReuseIdentifier<AddressBookCell> = Rswift.ReuseIdentifier(identifier: "AddressBookCell")
    /// Reuse identifier `TitleBarCell`.
    static let titleBarCell: Rswift.ReuseIdentifier<TitleBarCell> = Rswift.ReuseIdentifier(identifier: "TitleBarCell")
    /// Reuse identifier `btnTabCell`.
    static let btnTabCell: Rswift.ReuseIdentifier<btnTabCell> = Rswift.ReuseIdentifier(identifier: "btnTabCell")
    /// Reuse identifier `gasOff`.
    static let gasOff: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "gasOff")
    /// Reuse identifier `gasOn`.
    static let gasOn: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "gasOn")
    /// Reuse identifier `showCell_0`.
    static let showCell_0: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "showCell_0")
    /// Reuse identifier `showCell_1`.
    static let showCell_1: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "showCell_1")
    /// Reuse identifier `showCell_2`.
    static let showCell_2: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "showCell_2")
    /// Reuse identifier `showCell_3`.
    static let showCell_3: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "showCell_3")
    /// Reuse identifier `showCell_4`.
    static let showCell_4: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "showCell_4")
    /// Reuse identifier `showCell_5`.
    static let showCell_5: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "showCell_5")
    /// Reuse identifier `tokenCell`.
    static let tokenCell: Rswift.ReuseIdentifier<tokenCell> = Rswift.ReuseIdentifier(identifier: "tokenCell")
    /// Reuse identifier `transactionCell`.
    static let transactionCell: Rswift.ReuseIdentifier<transactionCell> = Rswift.ReuseIdentifier(identifier: "transactionCell")
    /// Reuse identifier `walletManageCell`.
    static let walletManageCell: Rswift.ReuseIdentifier<walletManageCell> = Rswift.ReuseIdentifier(identifier: "walletManageCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 10 view controllers.
  struct segue {
    /// This struct is generated for `AddressBookViewController`, and contains static references to 1 segues.
    struct addressBookViewController {
      /// Segue identifier `bookToAdd`.
      static let bookToAdd: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddressBookViewController, AddBookViewController> = Rswift.StoryboardSegueIdentifier(identifier: "bookToAdd")
      
      /// Optionally returns a typed version of segue `bookToAdd`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func bookToAdd(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddressBookViewController, AddBookViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addressBookViewController.bookToAdd, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CreateViewController`, and contains static references to 1 segues.
    struct createViewController {
      /// Segue identifier `createToCopy`.
      static let createToCopy: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CreateViewController, CopyViewController> = Rswift.StoryboardSegueIdentifier(identifier: "createToCopy")
      
      /// Optionally returns a typed version of segue `createToCopy`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func createToCopy(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CreateViewController, CopyViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.createViewController.createToCopy, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DetailsTableViewController`, and contains static references to 1 segues.
    struct detailsTableViewController {
      /// Segue identifier `DetailsToWeb`.
      static let detailsToWeb: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DetailsTableViewController, WebViewController> = Rswift.StoryboardSegueIdentifier(identifier: "DetailsToWeb")
      
      /// Optionally returns a typed version of segue `DetailsToWeb`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func detailsToWeb(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DetailsTableViewController, WebViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.detailsTableViewController.detailsToWeb, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ImportViewController`, and contains static references to 1 segues.
    struct importViewController {
      /// Segue identifier `importToCopy`.
      static let importToCopy: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ImportViewController, CopyViewController> = Rswift.StoryboardSegueIdentifier(identifier: "importToCopy")
      
      /// Optionally returns a typed version of segue `importToCopy`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func importToCopy(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ImportViewController, CopyViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.importViewController.importToCopy, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TokensViewController`, and contains static references to 2 segues.
    struct tokensViewController {
      /// Segue identifier `WalletToTransfer`.
      static let walletToTransfer: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TokensViewController, TransferViewController> = Rswift.StoryboardSegueIdentifier(identifier: "WalletToTransfer")
      /// Segue identifier `WalletToWelcome`.
      static let walletToWelcome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TokensViewController, WelcomeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "WalletToWelcome")
      
      /// Optionally returns a typed version of segue `WalletToTransfer`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func walletToTransfer(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TokensViewController, TransferViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tokensViewController.walletToTransfer, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `WalletToWelcome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func walletToWelcome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TokensViewController, WelcomeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.tokensViewController.walletToWelcome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TransationsViewController`, and contains static references to 1 segues.
    struct transationsViewController {
      /// Segue identifier `TransactionsToDetails`.
      static let transactionsToDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TransationsViewController, DetailsTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TransactionsToDetails")
      
      /// Optionally returns a typed version of segue `TransactionsToDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func transactionsToDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TransationsViewController, DetailsTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.transationsViewController.transactionsToDetails, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TransferViewController`, and contains static references to 2 segues.
    struct transferViewController {
      /// Segue identifier `TransferToDetails`.
      static let transferToDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TransferViewController, DetailsTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TransferToDetails")
      /// Segue identifier `TransferToTransferMain`.
      static let transferToTransferMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TransferViewController, TransferMainViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TransferToTransferMain")
      
      /// Optionally returns a typed version of segue `TransferToDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func transferToDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TransferViewController, DetailsTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.transferViewController.transferToDetails, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `TransferToTransferMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func transferToTransferMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TransferViewController, TransferMainViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.transferViewController.transferToTransferMain, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ViewController`, and contains static references to 2 segues.
    struct viewController {
      /// Segue identifier `BeginToMain`.
      static let beginToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, TabBarController> = Rswift.StoryboardSegueIdentifier(identifier: "BeginToMain")
      /// Segue identifier `BeginToWelcome`.
      static let beginToWelcome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "BeginToWelcome")
      
      /// Optionally returns a typed version of segue `BeginToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func beginToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, TabBarController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.beginToMain, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `BeginToWelcome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func beginToWelcome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.beginToWelcome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `WalletManageViewController`, and contains static references to 1 segues.
    struct walletManageViewController {
      /// Segue identifier `walletsToExport`.
      static let walletsToExport: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WalletManageViewController, ExportPeivateKeyViewController> = Rswift.StoryboardSegueIdentifier(identifier: "walletsToExport")
      
      /// Optionally returns a typed version of segue `walletsToExport`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func walletsToExport(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WalletManageViewController, ExportPeivateKeyViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.walletManageViewController.walletsToExport, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `WelcomeViewController`, and contains static references to 2 segues.
    struct welcomeViewController {
      /// Segue identifier `WelcomeToCreate`.
      static let welcomeToCreate: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WelcomeViewController, CreateViewController> = Rswift.StoryboardSegueIdentifier(identifier: "WelcomeToCreate")
      /// Segue identifier `WelcomeToImport`.
      static let welcomeToImport: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WelcomeViewController, ImportViewController> = Rswift.StoryboardSegueIdentifier(identifier: "WelcomeToImport")
      
      /// Optionally returns a typed version of segue `WelcomeToCreate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func welcomeToCreate(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WelcomeViewController, CreateViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.welcomeViewController.welcomeToCreate, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `WelcomeToImport`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func welcomeToImport(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WelcomeViewController, ImportViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.welcomeViewController.welcomeToImport, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 113 localization keys.
    struct localizable {
      /// en translation: (optional)
      /// 
      /// Locales: en, zh-Hans
      static let 选填 = Rswift.StringResource(key: "(选填)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en, zh-Hans
      static let 关于 = Rswift.StringResource(key: "关于", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account can not be empty
      /// 
      /// Locales: en
      static let 账号不能为空 = Rswift.StringResource(key: "账号不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add Address
      /// 
      /// Locales: en, zh-Hans
      static let 添加地址 = Rswift.StringResource(key: "添加地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address
      /// 
      /// Locales: en, zh-Hans
      static let importWatch = Rswift.StringResource(key: "import.watch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address Book
      /// 
      /// Locales: en, zh-Hans
      static let 地址簿 = Rswift.StringResource(key: "地址簿", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Advanced mode
      /// 
      /// Locales: en, zh-Hans
      static let 高级模式 = Rswift.StringResource(key: "高级模式", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, zh-Hans
      static let 全部 = Rswift.StringResource(key: "全部", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static let 金额 = Rswift.StringResource(key: "金额", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Anyone with a private key can access your wallet
      /// 
      /// Locales: en, zh-Hans
      static let 任何拥有私钥的人都可以访问你的钱包 = Rswift.StringResource(key: "任何拥有私钥的人都可以访问你的钱包", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup Keystore
      /// 
      /// Locales: en, zh-Hans
      static let 备份Keystore = Rswift.StringResource(key: "备份 Keystore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup Wallet
      /// 
      /// Locales: en, zh-Hans
      static let 备份钱包 = Rswift.StringResource(key: "备份钱包", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance: 
      /// 
      /// Locales: en, zh-Hans
      static let 余额 = Rswift.StringResource(key: "余额：", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let 取消 = Rswift.StringResource(key: "取消", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Choice Of Currency
      /// 
      /// Locales: en, zh-Hans
      static let 选择货币 = Rswift.StringResource(key: "选择货币", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Choice Of Language
      /// 
      /// Locales: en, zh-Hans
      static let 选择语言 = Rswift.StringResource(key: "选择语言", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Choice Of Network
      /// 
      /// Locales: en, zh-Hans
      static let 选择网络 = Rswift.StringResource(key: "选择网络", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear Cookies
      /// 
      /// Locales: en, zh-Hans
      static let 清除缓存 = Rswift.StringResource(key: "清除缓存", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm the password
      /// 
      /// Locales: en, zh-Hans
      static let 确认密码 = Rswift.StringResource(key: "确认密码", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirmation
      /// 
      /// Locales: en, zh-Hans
      static let 确认 = Rswift.StringResource(key: "确认", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static let 复制 = Rswift.StringResource(key: "复制", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy Address
      /// 
      /// Locales: en, zh-Hans
      static let 复制地址 = Rswift.StringResource(key: "复制地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Wallet
      /// 
      /// Locales: en, zh-Hans
      static let createBarTitle = Rswift.StringResource(key: "create.bar.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Wallet
      /// 
      /// Locales: en, zh-Hans
      static let 创建钱包 = Rswift.StringResource(key: "创建钱包", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Currency
      /// 
      /// Locales: en, zh-Hans
      static let 货币 = Rswift.StringResource(key: "货币", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Custom
      /// 
      /// Locales: en, zh-Hans
      static let 自定义 = Rswift.StringResource(key: "自定义", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delete The Wallet
      /// 
      /// Locales: en, zh-Hans
      static let 删除钱包 = Rswift.StringResource(key: "删除钱包", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Details of the transaction
      /// 
      /// Locales: en, zh-Hans
      static let 交易详情 = Rswift.StringResource(key: "交易详情", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: ERC20 Compatible
      /// 
      /// Locales: en, zh-Hans
      static let welcomeTitle2 = Rswift.StringResource(key: "welcome.title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: ETH Wallet
      /// 
      /// Locales: en, zh-Hans
      static let 以太坊钱包 = Rswift.StringResource(key: "以太坊钱包", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: English
      /// 
      /// Locales: en, zh-Hans
      static let settingLanguage = Rswift.StringResource(key: "setting.language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter the Ethernet address
      /// 
      /// Locales: en, zh-Hans
      static let 输入以太坊地址 = Rswift.StringResource(key: "输入以太坊地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Error in the amount of transfer
      /// 
      /// Locales: en, zh-Hans
      static let 转账的数额输入错误 = Rswift.StringResource(key: "转账的数额输入错误", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export Private Key
      /// 
      /// Locales: en, zh-Hans
      static let 导出私钥 = Rswift.StringResource(key: "导出私钥", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Fail
      /// 
      /// Locales: en, zh-Hans
      static let 失败 = Rswift.StringResource(key: "失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Fully transparent
      /// 
      /// Locales: en, zh-Hans
      static let welcomeDescription3 = Rswift.StringResource(key: "welcome.description3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Fully transparent
      /// 
      /// Locales: en, zh-Hans
      static let welcomeTitle3 = Rswift.StringResource(key: "welcome.title3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Fee
      /// 
      /// Locales: en, zh-Hans
      static let 矿工费用 = Rswift.StringResource(key: "矿工费用", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas price
      /// 
      /// Locales: en, zh-Hans
      static let gas价格 = Rswift.StringResource(key: "Gas价格", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Hex data
      /// 
      /// Locales: en, zh-Hans
      static let 十六进制数据 = Rswift.StringResource(key: "十六进制数据", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I have read it carefully and agree
      /// 
      /// Locales: en, zh-Hans
      static let 我已经仔细阅读并同意 = Rswift.StringResource(key: "我已经仔细阅读并同意", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import Wallet
      /// 
      /// Locales: en, zh-Hans
      static let importBarTitle = Rswift.StringResource(key: "import.bar.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: In
      /// 
      /// Locales: en, zh-Hans
      static let 转入 = Rswift.StringResource(key: "转入", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Input amount
      /// 
      /// Locales: en, zh-Hans
      static let 输入金额 = Rswift.StringResource(key: "输入金额", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static let 语言 = Rswift.StringResource(key: "语言", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: More Details
      /// 
      /// Locales: en, zh-Hans
      static let 更多详情 = Rswift.StringResource(key: "更多详情", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, zh-Hans
      static let 名称 = Rswift.StringResource(key: "名称", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Name and address can not be empty
      /// 
      /// Locales: en, zh-Hans
      static let 名称和地址都不能为空 = Rswift.StringResource(key: "名称和地址都不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network
      /// 
      /// Locales: en, zh-Hans
      static let 网络 = Rswift.StringResource(key: "网络", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: News
      /// 
      /// Locales: en, zh-Hans
      static let 资讯 = Rswift.StringResource(key: "资讯", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, zh-Hans
      static let 下一步 = Rswift.StringResource(key: "下一步", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No backup, no Ethereum
      /// 
      /// Locales: en, zh-Hans
      static let 无备份不Ethereum = Rswift.StringResource(key: "无备份，不Ethereum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Not a wallet
      /// 
      /// Locales: en
      static let 不是钱包 = Rswift.StringResource(key: "不是钱包", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static let 确定 = Rswift.StringResource(key: "确定", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Only input numbers
      /// 
      /// Locales: en, zh-Hans
      static let 只能输入数字 = Rswift.StringResource(key: "只能输入数字", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Order information
      /// 
      /// Locales: en, zh-Hans
      static let 订单信息 = Rswift.StringResource(key: "订单信息", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Out
      /// 
      /// Locales: en, zh-Hans
      static let 转出 = Rswift.StringResource(key: "转出", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static let 密码 = Rswift.StringResource(key: "密码", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password is used to encrypt your backup files. Please ensure that it is secure！
      /// 
      /// Locales: en, zh-Hans
      static let 密码用来加密你的备份文件请确保它的安全 = Rswift.StringResource(key: "密码用来加密你的备份文件，请确保它的安全！", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password/TouchID
      /// 
      /// Locales: en, zh-Hans
      static let 密码TouchID = Rswift.StringResource(key: "密码/TouchID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Passwords are used to protect private keys and transaction authorization. The intensity is very important.   This application does not store passwords, nor can it help you find it. Please keep it in mind.
      /// 
      /// Locales: en, zh-Hans
      static let createWarn = Rswift.StringResource(key: "create.warn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Payment address
      /// 
      /// Locales: en, zh-Hans
      static let 付款地址 = Rswift.StringResource(key: "付款地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Peivate Key
      /// 
      /// Locales: en, zh-Hans
      static let importPeivateKey = Rswift.StringResource(key: "import.peivate Key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter a valid address
      /// 
      /// Locales: en, zh-Hans
      static let 请输入有效的地址 = Rswift.StringResource(key: "请输入有效的地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter nickname
      /// 
      /// Locales: en
      static let 请输入昵称 = Rswift.StringResource(key: "请输入昵称", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter the amount of the transfer
      /// 
      /// Locales: en, zh-Hans
      static let 请输入转账金额 = Rswift.StringResource(key: "请输入转账金额", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter the correct address
      /// 
      /// Locales: en, zh-Hans
      static let 请输入正确的地址 = Rswift.StringResource(key: "请输入正确的地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter the specified amount
      /// 
      /// Locales: en, zh-Hans
      static let 请输入指定的金额 = Rswift.StringResource(key: "请输入指定的金额", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input a password
      /// 
      /// Locales: en, zh-Hans
      static let 请输入密码 = Rswift.StringResource(key: "请输入密码", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please transfer 
      /// 
      /// Locales: en, zh-Hans
      static let 请转入 = Rswift.StringResource(key: "请转入", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Private & Secure
      /// 
      /// Locales: en, zh-Hans
      static let welcomeTitle1 = Rswift.StringResource(key: "welcome.title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Private keys never leave your device.
      /// 
      /// Locales: en, zh-Hans
      static let welcomeDescription1 = Rswift.StringResource(key: "welcome.description1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Push Notifications
      /// 
      /// Locales: en, zh-Hans
      static let 推送通知 = Rswift.StringResource(key: "推送通知", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Quotation
      /// 
      /// Locales: en, zh-Hans
      static let 行情 = Rswift.StringResource(key: "行情", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receivable address
      /// 
      /// Locales: en, zh-Hans
      static let 收款地址 = Rswift.StringResource(key: "收款地址", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static let 收款 = Rswift.StringResource(key: "收款", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Remarks
      /// 
      /// Locales: en, zh-Hans
      static let 备注 = Rswift.StringResource(key: "备注", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Remarks (optional)
      /// 
      /// Locales: en, zh-Hans
      static let 备注选填 = Rswift.StringResource(key: "备注（选填）", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en, zh-Hans
      static let 保存 = Rswift.StringResource(key: "保存", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search Token
      /// 
      /// Locales: en, zh-Hans
      static let 搜索通证 = Rswift.StringResource(key: "搜索通证", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static let 转账 = Rswift.StringResource(key: "转账", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Services and privacy clauses
      /// 
      /// Locales: en, zh-Hans
      static let 服务及隐私条款 = Rswift.StringResource(key: "服务及隐私条款", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let 设置 = Rswift.StringResource(key: "设置", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share
      /// 
      /// Locales: en, zh-Hans
      static let 分享 = Rswift.StringResource(key: "分享", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Since only you control your money, you must backup your wallet in case this app is deleted, or your device is lost.
      /// 
      /// Locales: en, zh-Hans
      static let 只有你能掌控你的资产为了防止它们因为应用被删而丢失你需要备份Keystore = Rswift.StringResource(key: "只有你能掌控你的资产，为了防止它们因为应用被删而丢失，你需要备份 Keystore。", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Specified amount
      /// 
      /// Locales: en, zh-Hans
      static let 指定金额 = Rswift.StringResource(key: "指定金额", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Support for ERC20 tokens by default. 
      /// 
      /// Locales: en, zh-Hans
      static let welcomeDescription2 = Rswift.StringResource(key: "welcome.description2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The fastest Ethereum wallet experience on mobile
      /// 
      /// Locales: en, zh-Hans
      static let welcomeDescription4 = Rswift.StringResource(key: "welcome.description4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The password can not be empty
      /// 
      /// Locales: en, zh-Hans
      static let 密码不能为空 = Rswift.StringResource(key: "密码不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The private key can not be empty
      /// 
      /// Locales: en
      static let 私钥不能为空 = Rswift.StringResource(key: "私钥不能为空", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The private key has been copied to the clipboard
      /// 
      /// Locales: en, zh-Hans
      static let 已经复制私钥到剪贴板 = Rswift.StringResource(key: "已经复制私钥到剪贴板", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The risk that you are responsible for exporting
      /// 
      /// Locales: en, zh-Hans
      static let 导出风险自负 = Rswift.StringResource(key: "导出风险自负", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The wallet address has been copied to the clipboard
      /// 
      /// Locales: en, zh-Hans
      static let 已经复制钱包地址到剪贴板 = Rswift.StringResource(key: "已经复制钱包地址到剪贴板", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Tips
      /// 
      /// Locales: en, zh-Hans
      static let 提示 = Rswift.StringResource(key: "提示", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Today
      /// 
      /// Locales: en, zh-Hans
      static let 今天 = Rswift.StringResource(key: "今天", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token
      /// 
      /// Locales: en, zh-Hans
      static let 通证 = Rswift.StringResource(key: "通证", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction ID
      /// 
      /// Locales: en, zh-Hans
      static let 交易ID = Rswift.StringResource(key: "交易ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction failed
      /// 
      /// Locales: en
      static let 交易失败 = Rswift.StringResource(key: "交易失败", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Transaction time
      /// 
      /// Locales: en, zh-Hans
      static let 交易时间 = Rswift.StringResource(key: "交易时间", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transactions
      /// 
      /// Locales: en, zh-Hans
      static let 交易 = Rswift.StringResource(key: "交易", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Two input password inconsistency
      /// 
      /// Locales: en, zh-Hans
      static let 两次输入的密码不一致 = Rswift.StringResource(key: "两次输入的密码不一致", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Ultra Reliable
      /// 
      /// Locales: en, zh-Hans
      static let welcomeTitle4 = Rswift.StringResource(key: "welcome.title4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static let walletBarTitle = Rswift.StringResource(key: "wallet.bar.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static let 钱包 = Rswift.StringResource(key: "钱包", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet Name
      /// 
      /// Locales: en, zh-Hans
      static let 钱包名称 = Rswift.StringResource(key: "钱包名称", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet Settings
      /// 
      /// Locales: en, zh-Hans
      static let 钱包设置 = Rswift.StringResource(key: "钱包设置", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Watch users have not yet opened this function.
      /// 
      /// Locales: en
      static let watch用户暂未开通该功能 = Rswift.StringResource(key: "Watch用户暂未开通该功能", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Words separated by spaces (usually containing 12 words).
      /// 
      /// Locales: en, zh-Hans
      static let importMnemonic = Rswift.StringResource(key: "import.mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Yesterday
      /// 
      /// Locales: en, zh-Hans
      static let 昨天 = Rswift.StringResource(key: "昨天", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your wallet is never saved to cloud storage or standard device backups.
      /// 
      /// Locales: en, zh-Hans
      static let 你的钱包永远不会被保存到云存储或者系统的标准设备备份里 = Rswift.StringResource(key: "你的钱包永远不会被保存到云存储，或者系统的标准设备备份里。", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: en
      /// 
      /// Locales: en, zh-Hans
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: gasPrice is too low
      /// 
      /// Locales: en
      static let 燃油费过低 = Rswift.StringResource(key: "燃油费过低", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: zh-Hans
      /// 
      /// Locales: en, zh-Hans
      static let 简体中文 = Rswift.StringResource(key: "简体中文", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: (optional)
      /// 
      /// Locales: en, zh-Hans
      static func 选填(_: Void = ()) -> String {
        return NSLocalizedString("(选填)", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: About
      /// 
      /// Locales: en, zh-Hans
      static func 关于(_: Void = ()) -> String {
        return NSLocalizedString("关于", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account can not be empty
      /// 
      /// Locales: en
      static func 账号不能为空(_: Void = ()) -> String {
        return NSLocalizedString("账号不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Address
      /// 
      /// Locales: en, zh-Hans
      static func 添加地址(_: Void = ()) -> String {
        return NSLocalizedString("添加地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address
      /// 
      /// Locales: en, zh-Hans
      static func importWatch(_: Void = ()) -> String {
        return NSLocalizedString("import.watch", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address Book
      /// 
      /// Locales: en, zh-Hans
      static func 地址簿(_: Void = ()) -> String {
        return NSLocalizedString("地址簿", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Advanced mode
      /// 
      /// Locales: en, zh-Hans
      static func 高级模式(_: Void = ()) -> String {
        return NSLocalizedString("高级模式", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, zh-Hans
      static func 全部(_: Void = ()) -> String {
        return NSLocalizedString("全部", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static func 金额(_: Void = ()) -> String {
        return NSLocalizedString("金额", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Anyone with a private key can access your wallet
      /// 
      /// Locales: en, zh-Hans
      static func 任何拥有私钥的人都可以访问你的钱包(_: Void = ()) -> String {
        return NSLocalizedString("任何拥有私钥的人都可以访问你的钱包", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Keystore
      /// 
      /// Locales: en, zh-Hans
      static func 备份Keystore(_: Void = ()) -> String {
        return NSLocalizedString("备份 Keystore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Wallet
      /// 
      /// Locales: en, zh-Hans
      static func 备份钱包(_: Void = ()) -> String {
        return NSLocalizedString("备份钱包", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance: 
      /// 
      /// Locales: en, zh-Hans
      static func 余额(_: Void = ()) -> String {
        return NSLocalizedString("余额：", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func 取消(_: Void = ()) -> String {
        return NSLocalizedString("取消", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Choice Of Currency
      /// 
      /// Locales: en, zh-Hans
      static func 选择货币(_: Void = ()) -> String {
        return NSLocalizedString("选择货币", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Choice Of Language
      /// 
      /// Locales: en, zh-Hans
      static func 选择语言(_: Void = ()) -> String {
        return NSLocalizedString("选择语言", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Choice Of Network
      /// 
      /// Locales: en, zh-Hans
      static func 选择网络(_: Void = ()) -> String {
        return NSLocalizedString("选择网络", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear Cookies
      /// 
      /// Locales: en, zh-Hans
      static func 清除缓存(_: Void = ()) -> String {
        return NSLocalizedString("清除缓存", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm the password
      /// 
      /// Locales: en, zh-Hans
      static func 确认密码(_: Void = ()) -> String {
        return NSLocalizedString("确认密码", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirmation
      /// 
      /// Locales: en, zh-Hans
      static func 确认(_: Void = ()) -> String {
        return NSLocalizedString("确认", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static func 复制(_: Void = ()) -> String {
        return NSLocalizedString("复制", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy Address
      /// 
      /// Locales: en, zh-Hans
      static func 复制地址(_: Void = ()) -> String {
        return NSLocalizedString("复制地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Wallet
      /// 
      /// Locales: en, zh-Hans
      static func createBarTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.bar.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Wallet
      /// 
      /// Locales: en, zh-Hans
      static func 创建钱包(_: Void = ()) -> String {
        return NSLocalizedString("创建钱包", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency
      /// 
      /// Locales: en, zh-Hans
      static func 货币(_: Void = ()) -> String {
        return NSLocalizedString("货币", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Custom
      /// 
      /// Locales: en, zh-Hans
      static func 自定义(_: Void = ()) -> String {
        return NSLocalizedString("自定义", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete The Wallet
      /// 
      /// Locales: en, zh-Hans
      static func 删除钱包(_: Void = ()) -> String {
        return NSLocalizedString("删除钱包", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Details of the transaction
      /// 
      /// Locales: en, zh-Hans
      static func 交易详情(_: Void = ()) -> String {
        return NSLocalizedString("交易详情", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ERC20 Compatible
      /// 
      /// Locales: en, zh-Hans
      static func welcomeTitle2(_: Void = ()) -> String {
        return NSLocalizedString("welcome.title2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ETH Wallet
      /// 
      /// Locales: en, zh-Hans
      static func 以太坊钱包(_: Void = ()) -> String {
        return NSLocalizedString("以太坊钱包", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: English
      /// 
      /// Locales: en, zh-Hans
      static func settingLanguage(_: Void = ()) -> String {
        return NSLocalizedString("setting.language", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter the Ethernet address
      /// 
      /// Locales: en, zh-Hans
      static func 输入以太坊地址(_: Void = ()) -> String {
        return NSLocalizedString("输入以太坊地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error in the amount of transfer
      /// 
      /// Locales: en, zh-Hans
      static func 转账的数额输入错误(_: Void = ()) -> String {
        return NSLocalizedString("转账的数额输入错误", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Private Key
      /// 
      /// Locales: en, zh-Hans
      static func 导出私钥(_: Void = ()) -> String {
        return NSLocalizedString("导出私钥", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fail
      /// 
      /// Locales: en, zh-Hans
      static func 失败(_: Void = ()) -> String {
        return NSLocalizedString("失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fully transparent
      /// 
      /// Locales: en, zh-Hans
      static func welcomeDescription3(_: Void = ()) -> String {
        return NSLocalizedString("welcome.description3", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fully transparent
      /// 
      /// Locales: en, zh-Hans
      static func welcomeTitle3(_: Void = ()) -> String {
        return NSLocalizedString("welcome.title3", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Fee
      /// 
      /// Locales: en, zh-Hans
      static func 矿工费用(_: Void = ()) -> String {
        return NSLocalizedString("矿工费用", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas price
      /// 
      /// Locales: en, zh-Hans
      static func gas价格(_: Void = ()) -> String {
        return NSLocalizedString("Gas价格", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hex data
      /// 
      /// Locales: en, zh-Hans
      static func 十六进制数据(_: Void = ()) -> String {
        return NSLocalizedString("十六进制数据", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I have read it carefully and agree
      /// 
      /// Locales: en, zh-Hans
      static func 我已经仔细阅读并同意(_: Void = ()) -> String {
        return NSLocalizedString("我已经仔细阅读并同意", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import Wallet
      /// 
      /// Locales: en, zh-Hans
      static func importBarTitle(_: Void = ()) -> String {
        return NSLocalizedString("import.bar.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: In
      /// 
      /// Locales: en, zh-Hans
      static func 转入(_: Void = ()) -> String {
        return NSLocalizedString("转入", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input amount
      /// 
      /// Locales: en, zh-Hans
      static func 输入金额(_: Void = ()) -> String {
        return NSLocalizedString("输入金额", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static func 语言(_: Void = ()) -> String {
        return NSLocalizedString("语言", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More Details
      /// 
      /// Locales: en, zh-Hans
      static func 更多详情(_: Void = ()) -> String {
        return NSLocalizedString("更多详情", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, zh-Hans
      static func 名称(_: Void = ()) -> String {
        return NSLocalizedString("名称", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name and address can not be empty
      /// 
      /// Locales: en, zh-Hans
      static func 名称和地址都不能为空(_: Void = ()) -> String {
        return NSLocalizedString("名称和地址都不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network
      /// 
      /// Locales: en, zh-Hans
      static func 网络(_: Void = ()) -> String {
        return NSLocalizedString("网络", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: News
      /// 
      /// Locales: en, zh-Hans
      static func 资讯(_: Void = ()) -> String {
        return NSLocalizedString("资讯", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, zh-Hans
      static func 下一步(_: Void = ()) -> String {
        return NSLocalizedString("下一步", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No backup, no Ethereum
      /// 
      /// Locales: en, zh-Hans
      static func 无备份不Ethereum(_: Void = ()) -> String {
        return NSLocalizedString("无备份，不Ethereum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not a wallet
      /// 
      /// Locales: en
      static func 不是钱包(_: Void = ()) -> String {
        return NSLocalizedString("不是钱包", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static func 确定(_: Void = ()) -> String {
        return NSLocalizedString("确定", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Only input numbers
      /// 
      /// Locales: en, zh-Hans
      static func 只能输入数字(_: Void = ()) -> String {
        return NSLocalizedString("只能输入数字", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Order information
      /// 
      /// Locales: en, zh-Hans
      static func 订单信息(_: Void = ()) -> String {
        return NSLocalizedString("订单信息", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Out
      /// 
      /// Locales: en, zh-Hans
      static func 转出(_: Void = ()) -> String {
        return NSLocalizedString("转出", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static func 密码(_: Void = ()) -> String {
        return NSLocalizedString("密码", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password is used to encrypt your backup files. Please ensure that it is secure！
      /// 
      /// Locales: en, zh-Hans
      static func 密码用来加密你的备份文件请确保它的安全(_: Void = ()) -> String {
        return NSLocalizedString("密码用来加密你的备份文件，请确保它的安全！", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password/TouchID
      /// 
      /// Locales: en, zh-Hans
      static func 密码TouchID(_: Void = ()) -> String {
        return NSLocalizedString("密码/TouchID", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Passwords are used to protect private keys and transaction authorization. The intensity is very important.   This application does not store passwords, nor can it help you find it. Please keep it in mind.
      /// 
      /// Locales: en, zh-Hans
      static func createWarn(_: Void = ()) -> String {
        return NSLocalizedString("create.warn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Payment address
      /// 
      /// Locales: en, zh-Hans
      static func 付款地址(_: Void = ()) -> String {
        return NSLocalizedString("付款地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Peivate Key
      /// 
      /// Locales: en, zh-Hans
      static func importPeivateKey(_: Void = ()) -> String {
        return NSLocalizedString("import.peivate Key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter a valid address
      /// 
      /// Locales: en, zh-Hans
      static func 请输入有效的地址(_: Void = ()) -> String {
        return NSLocalizedString("请输入有效的地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter nickname
      /// 
      /// Locales: en
      static func 请输入昵称(_: Void = ()) -> String {
        return NSLocalizedString("请输入昵称", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the amount of the transfer
      /// 
      /// Locales: en, zh-Hans
      static func 请输入转账金额(_: Void = ()) -> String {
        return NSLocalizedString("请输入转账金额", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the correct address
      /// 
      /// Locales: en, zh-Hans
      static func 请输入正确的地址(_: Void = ()) -> String {
        return NSLocalizedString("请输入正确的地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the specified amount
      /// 
      /// Locales: en, zh-Hans
      static func 请输入指定的金额(_: Void = ()) -> String {
        return NSLocalizedString("请输入指定的金额", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input a password
      /// 
      /// Locales: en, zh-Hans
      static func 请输入密码(_: Void = ()) -> String {
        return NSLocalizedString("请输入密码", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please transfer 
      /// 
      /// Locales: en, zh-Hans
      static func 请转入(_: Void = ()) -> String {
        return NSLocalizedString("请转入", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private & Secure
      /// 
      /// Locales: en, zh-Hans
      static func welcomeTitle1(_: Void = ()) -> String {
        return NSLocalizedString("welcome.title1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private keys never leave your device.
      /// 
      /// Locales: en, zh-Hans
      static func welcomeDescription1(_: Void = ()) -> String {
        return NSLocalizedString("welcome.description1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Push Notifications
      /// 
      /// Locales: en, zh-Hans
      static func 推送通知(_: Void = ()) -> String {
        return NSLocalizedString("推送通知", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quotation
      /// 
      /// Locales: en, zh-Hans
      static func 行情(_: Void = ()) -> String {
        return NSLocalizedString("行情", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receivable address
      /// 
      /// Locales: en, zh-Hans
      static func 收款地址(_: Void = ()) -> String {
        return NSLocalizedString("收款地址", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static func 收款(_: Void = ()) -> String {
        return NSLocalizedString("收款", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remarks
      /// 
      /// Locales: en, zh-Hans
      static func 备注(_: Void = ()) -> String {
        return NSLocalizedString("备注", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remarks (optional)
      /// 
      /// Locales: en, zh-Hans
      static func 备注选填(_: Void = ()) -> String {
        return NSLocalizedString("备注（选填）", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en, zh-Hans
      static func 保存(_: Void = ()) -> String {
        return NSLocalizedString("保存", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search Token
      /// 
      /// Locales: en, zh-Hans
      static func 搜索通证(_: Void = ()) -> String {
        return NSLocalizedString("搜索通证", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static func 转账(_: Void = ()) -> String {
        return NSLocalizedString("转账", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Services and privacy clauses
      /// 
      /// Locales: en, zh-Hans
      static func 服务及隐私条款(_: Void = ()) -> String {
        return NSLocalizedString("服务及隐私条款", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func 设置(_: Void = ()) -> String {
        return NSLocalizedString("设置", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share
      /// 
      /// Locales: en, zh-Hans
      static func 分享(_: Void = ()) -> String {
        return NSLocalizedString("分享", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Since only you control your money, you must backup your wallet in case this app is deleted, or your device is lost.
      /// 
      /// Locales: en, zh-Hans
      static func 只有你能掌控你的资产为了防止它们因为应用被删而丢失你需要备份Keystore(_: Void = ()) -> String {
        return NSLocalizedString("只有你能掌控你的资产，为了防止它们因为应用被删而丢失，你需要备份 Keystore。", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Specified amount
      /// 
      /// Locales: en, zh-Hans
      static func 指定金额(_: Void = ()) -> String {
        return NSLocalizedString("指定金额", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support for ERC20 tokens by default. 
      /// 
      /// Locales: en, zh-Hans
      static func welcomeDescription2(_: Void = ()) -> String {
        return NSLocalizedString("welcome.description2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The fastest Ethereum wallet experience on mobile
      /// 
      /// Locales: en, zh-Hans
      static func welcomeDescription4(_: Void = ()) -> String {
        return NSLocalizedString("welcome.description4", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The password can not be empty
      /// 
      /// Locales: en, zh-Hans
      static func 密码不能为空(_: Void = ()) -> String {
        return NSLocalizedString("密码不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The private key can not be empty
      /// 
      /// Locales: en
      static func 私钥不能为空(_: Void = ()) -> String {
        return NSLocalizedString("私钥不能为空", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The private key has been copied to the clipboard
      /// 
      /// Locales: en, zh-Hans
      static func 已经复制私钥到剪贴板(_: Void = ()) -> String {
        return NSLocalizedString("已经复制私钥到剪贴板", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The risk that you are responsible for exporting
      /// 
      /// Locales: en, zh-Hans
      static func 导出风险自负(_: Void = ()) -> String {
        return NSLocalizedString("导出风险自负", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The wallet address has been copied to the clipboard
      /// 
      /// Locales: en, zh-Hans
      static func 已经复制钱包地址到剪贴板(_: Void = ()) -> String {
        return NSLocalizedString("已经复制钱包地址到剪贴板", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tips
      /// 
      /// Locales: en, zh-Hans
      static func 提示(_: Void = ()) -> String {
        return NSLocalizedString("提示", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Today
      /// 
      /// Locales: en, zh-Hans
      static func 今天(_: Void = ()) -> String {
        return NSLocalizedString("今天", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token
      /// 
      /// Locales: en, zh-Hans
      static func 通证(_: Void = ()) -> String {
        return NSLocalizedString("通证", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction ID
      /// 
      /// Locales: en, zh-Hans
      static func 交易ID(_: Void = ()) -> String {
        return NSLocalizedString("交易ID", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction failed
      /// 
      /// Locales: en
      static func 交易失败(_: Void = ()) -> String {
        return NSLocalizedString("交易失败", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction time
      /// 
      /// Locales: en, zh-Hans
      static func 交易时间(_: Void = ()) -> String {
        return NSLocalizedString("交易时间", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions
      /// 
      /// Locales: en, zh-Hans
      static func 交易(_: Void = ()) -> String {
        return NSLocalizedString("交易", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Two input password inconsistency
      /// 
      /// Locales: en, zh-Hans
      static func 两次输入的密码不一致(_: Void = ()) -> String {
        return NSLocalizedString("两次输入的密码不一致", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ultra Reliable
      /// 
      /// Locales: en, zh-Hans
      static func welcomeTitle4(_: Void = ()) -> String {
        return NSLocalizedString("welcome.title4", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static func walletBarTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.bar.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static func 钱包(_: Void = ()) -> String {
        return NSLocalizedString("钱包", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Name
      /// 
      /// Locales: en, zh-Hans
      static func 钱包名称(_: Void = ()) -> String {
        return NSLocalizedString("钱包名称", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Settings
      /// 
      /// Locales: en, zh-Hans
      static func 钱包设置(_: Void = ()) -> String {
        return NSLocalizedString("钱包设置", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Watch users have not yet opened this function.
      /// 
      /// Locales: en
      static func watch用户暂未开通该功能(_: Void = ()) -> String {
        return NSLocalizedString("Watch用户暂未开通该功能", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Words separated by spaces (usually containing 12 words).
      /// 
      /// Locales: en, zh-Hans
      static func importMnemonic(_: Void = ()) -> String {
        return NSLocalizedString("import.mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yesterday
      /// 
      /// Locales: en, zh-Hans
      static func 昨天(_: Void = ()) -> String {
        return NSLocalizedString("昨天", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your wallet is never saved to cloud storage or standard device backups.
      /// 
      /// Locales: en, zh-Hans
      static func 你的钱包永远不会被保存到云存储或者系统的标准设备备份里(_: Void = ()) -> String {
        return NSLocalizedString("你的钱包永远不会被保存到云存储，或者系统的标准设备备份里。", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: en
      /// 
      /// Locales: en, zh-Hans
      static func english(_: Void = ()) -> String {
        return NSLocalizedString("English", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: gasPrice is too low
      /// 
      /// Locales: en
      static func 燃油费过低(_: Void = ()) -> String {
        return NSLocalizedString("燃油费过低", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: zh-Hans
      /// 
      /// Locales: en, zh-Hans
      static func 简体中文(_: Void = ()) -> String {
        return NSLocalizedString("简体中文", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _tokenCell.validate()
      try _btnTabCell.validate()
      try _EditTokenTableViewCell.validate()
      try _AddressBookCell.validate()
      try _walletManageCell.validate()
      try _walletCell.validate()
      try _transactionCell.validate()
      try _tokenCell_2.validate()
      try _hqCell.validate()
    }
    
    struct _AddressBookCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddressBookCell
      
      let bundle = R.hostingBundle
      let identifier = "AddressBookCell"
      let name = "AddressBookCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddressBookCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressBookCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_ money_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_ money_1' is used in nib 'AddressBookCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EditTokenTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditTokenTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EditTokenTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditTokenTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_ money_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_ money_1' is used in nib 'EditTokenTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TitleBarCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TitleBarCell
      
      let bundle = R.hostingBundle
      let identifier = "TitleBarCell"
      let name = "TitleBarCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TitleBarCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleBarCell
      }
      
      fileprivate init() {}
    }
    
    struct _btnTabCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = btnTabCell
      
      let bundle = R.hostingBundle
      let identifier = "btnTabCell"
      let name = "btnTabCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> btnTabCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? btnTabCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_triangle_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_triangle_3' is used in nib 'btnTabCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_triangle_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_triangle_1' is used in nib 'btnTabCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _hqCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "hqCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> hqCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? hqCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bg_rise", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_rise' is used in nib 'hqCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_ money_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_ money_1' is used in nib 'hqCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _tokenCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = tokenCell
      
      let bundle = R.hostingBundle
      let identifier = "tokenCell"
      let name = "tokenCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> tokenCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? tokenCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_ money_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_ money_1' is used in nib 'tokenCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _tokenCell_2: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "tokenCell_2"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> tokenCell_2? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? tokenCell_2
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_ money_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_ money_1' is used in nib 'tokenCell_2', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _transactionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = transactionCell
      
      let bundle = R.hostingBundle
      let identifier = "transactionCell"
      let name = "transactionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> transactionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? transactionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bg_turnout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_turnout' is used in nib 'transactionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _walletCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "walletCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> walletCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? walletCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_wallet_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_1' is used in nib 'walletCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _walletManageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = walletManageCell
      
      let bundle = R.hostingBundle
      let identifier = "walletManageCell"
      let name = "walletManageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> walletManageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? walletManageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_wallet_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_1' is used in nib 'walletManageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tick' is used in nib 'walletManageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setup' is used in nib 'walletManageCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _zxCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "zxCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> zxCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? zxCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_shanping") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shanping' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let aboutView = StoryboardViewControllerResource<AboutMainViewController>(identifier: "AboutView")
      let addressBookView = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "AddressBookView")
      let bundle = R.hostingBundle
      let firstView = StoryboardViewControllerResource<ViewController>(identifier: "firstView")
      let importViewController = StoryboardViewControllerResource<ImportViewController>(identifier: "ImportViewController")
      let mainWalletManage = StoryboardViewControllerResource<ManagerMainViewController>(identifier: "MainWalletManage")
      let mainWalletNavigaiton = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "mainWalletNavigaiton")
      let name = "Main"
      let newsView_1 = StoryboardViewControllerResource<NewsViewController_1>(identifier: "newsView_1")
      let passNa = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "passNa")
      let passWordView = StoryboardViewControllerResource<PassWordViewController>(identifier: "passWordView")
      let tabBarController = StoryboardViewControllerResource<TabBarController>(identifier: "tabBarController")
      let tokensView = StoryboardViewControllerResource<TokensViewController>(identifier: "TokensView")
      let transferConfirm = StoryboardViewControllerResource<TransferConfirmViewController>(identifier: "transferConfirm")
      let transferMain = StoryboardViewControllerResource<TransferMainViewController>(identifier: "transferMain")
      let transferNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "TransferNavigation")
      let transferTableView = StoryboardViewControllerResource<TransferTableViewController>(identifier: "transferTableView")
      let walletList = StoryboardViewControllerResource<changeWalletViewController>(identifier: "walletList")
      let walletManageNa = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "WalletManageNa")
      let walletSetting = StoryboardViewControllerResource<WalletSettingViewController>(identifier: "walletSetting")
      let webView = StoryboardViewControllerResource<WebViewController>(identifier: "WebView")
      let welcomeView = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "WelcomeView")
      let welcomeView1 = StoryboardViewControllerResource<WelcomeViewController>(identifier: "WelcomeView1")
      
      func aboutView(_: Void = ()) -> AboutMainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutView)
      }
      
      func addressBookView(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressBookView)
      }
      
      func firstView(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: firstView)
      }
      
      func importViewController(_: Void = ()) -> ImportViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: importViewController)
      }
      
      func mainWalletManage(_: Void = ()) -> ManagerMainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainWalletManage)
      }
      
      func mainWalletNavigaiton(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainWalletNavigaiton)
      }
      
      func newsView_1(_: Void = ()) -> NewsViewController_1? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsView_1)
      }
      
      func passNa(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passNa)
      }
      
      func passWordView(_: Void = ()) -> PassWordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passWordView)
      }
      
      func tabBarController(_: Void = ()) -> TabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarController)
      }
      
      func tokensView(_: Void = ()) -> TokensViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tokensView)
      }
      
      func transferConfirm(_: Void = ()) -> TransferConfirmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transferConfirm)
      }
      
      func transferMain(_: Void = ()) -> TransferMainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transferMain)
      }
      
      func transferNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transferNavigation)
      }
      
      func transferTableView(_: Void = ()) -> TransferTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transferTableView)
      }
      
      func walletList(_: Void = ()) -> changeWalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletList)
      }
      
      func walletManageNa(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletManageNa)
      }
      
      func walletSetting(_: Void = ()) -> WalletSettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletSetting)
      }
      
      func webView(_: Void = ()) -> WebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webView)
      }
      
      func welcomeView(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeView)
      }
      
      func welcomeView1(_: Void = ()) -> WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeView1)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_set_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_set_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_wback_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_wback_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_tortoise") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_tortoise' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_update") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_update' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_establish_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_establish_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_ money_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_ money_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_gback_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_gback_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_add' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_share' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_dapp_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_dapp_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_receivables") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_receivables' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_close_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_close_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_quotation_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_quotation_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_receivables_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_receivables_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_set_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_set_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_careful_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_careful_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_establish_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_establish_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_copy_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_copy_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_rabbit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_rabbit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_currency") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_currency' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_about") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_about' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_import_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_import_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_wallet_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_wallet_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_zhuanzhang_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_zhuanzhang_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_gback_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_gback_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_network") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_network' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_details_4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_details_4' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_dapp_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_dapp_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_transaction_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_transaction_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_change_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_change_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_quotation_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_quotation_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_scanning_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_scanning_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_addressbook") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_addressbook' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_language") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_language' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "set") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'set' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_clear") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_clear' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_notice") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_notice' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_send_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_send_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_wback_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_wback_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_confirm_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_confirm_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_confirm_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_confirm_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_details_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_details_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_details_3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_details_3' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_scanning_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_scanning_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_receivables_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_receivables_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_wallet_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_wallet_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_transaction_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_transaction_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_wallet_4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_4' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_details_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_details_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_more_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_add' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_close_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_close_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_import_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_import_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_wallet_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_wallet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_tick_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_tick_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_copy_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_copy_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_more_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shanping") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shanping' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_careful") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_careful' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "list_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'list_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_zhuanzhang_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_zhuanzhang_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_send_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_send_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_wallet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_wallet' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_yuanjiao") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_yuanjiao' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_add_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_add_1' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().newsView_1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsView_1' could not be loaded from storyboard 'Main' as 'NewsViewController_1'.") }
        if _R.storyboard.main().transferNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transferNavigation' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().tokensView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tokensView' could not be loaded from storyboard 'Main' as 'TokensViewController'.") }
        if _R.storyboard.main().tabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarController' could not be loaded from storyboard 'Main' as 'TabBarController'.") }
        if _R.storyboard.main().walletList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletList' could not be loaded from storyboard 'Main' as 'changeWalletViewController'.") }
        if _R.storyboard.main().transferMain() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transferMain' could not be loaded from storyboard 'Main' as 'TransferMainViewController'.") }
        if _R.storyboard.main().aboutView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutView' could not be loaded from storyboard 'Main' as 'AboutMainViewController'.") }
        if _R.storyboard.main().welcomeView1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeView1' could not be loaded from storyboard 'Main' as 'WelcomeViewController'.") }
        if _R.storyboard.main().mainWalletManage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainWalletManage' could not be loaded from storyboard 'Main' as 'ManagerMainViewController'.") }
        if _R.storyboard.main().welcomeView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeView' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().transferConfirm() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transferConfirm' could not be loaded from storyboard 'Main' as 'TransferConfirmViewController'.") }
        if _R.storyboard.main().passNa() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passNa' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().walletSetting() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletSetting' could not be loaded from storyboard 'Main' as 'WalletSettingViewController'.") }
        if _R.storyboard.main().passWordView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passWordView' could not be loaded from storyboard 'Main' as 'PassWordViewController'.") }
        if _R.storyboard.main().addressBookView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressBookView' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().firstView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'firstView' could not be loaded from storyboard 'Main' as 'ViewController'.") }
        if _R.storyboard.main().importViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'importViewController' could not be loaded from storyboard 'Main' as 'ImportViewController'.") }
        if _R.storyboard.main().mainWalletNavigaiton() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainWalletNavigaiton' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().transferTableView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transferTableView' could not be loaded from storyboard 'Main' as 'TransferTableViewController'.") }
        if _R.storyboard.main().walletManageNa() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletManageNa' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().webView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webView' could not be loaded from storyboard 'Main' as 'WebViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
